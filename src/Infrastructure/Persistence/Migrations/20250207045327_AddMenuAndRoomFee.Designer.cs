// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250207045327_AddMenuAndRoomFee")]
    partial class AddMenuAndRoomFee
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.RoomTypeFees.DayFee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("AdultAdditionalFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CheckInAt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CheckOutAt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ChildAdditionalFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("FeePolicyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsResideIn24h")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FeePolicyId")
                        .IsUnique();

                    b.ToTable("DayFees");
                });

            modelBuilder.Entity("Domain.Entities.RoomTypeFees.FeePolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoomTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("FeePolicies");
                });

            modelBuilder.Entity("Domain.Entities.RoomTypeFees.HourFee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FeePolicyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FeePolicyId")
                        .IsUnique();

                    b.ToTable("HourFees");
                });

            modelBuilder.Entity("Domain.Entities.RoomTypeFees.HourFeePrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Hour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("HourFeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("HourFeeId");

                    b.ToTable("HourFeePrices");
                });

            modelBuilder.Entity("Domain.Entities.RoomTypeFees.MonthFee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("FeePolicyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("WhenToCalculate")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FeePolicyId")
                        .IsUnique();

                    b.ToTable("MonthFees");
                });

            modelBuilder.Entity("Domain.Entities.RoomTypeFees.NightFee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CheckIn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CheckOut")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("FeePolicyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FeePolicyId")
                        .IsUnique();

                    b.ToTable("NightFees");
                });

            modelBuilder.Entity("Domain.Entities.RoomTypeFees.PunishFee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DayFeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsCheckInEarlyOrCheckOutLate")
                        .HasColumnType("bit");

                    b.Property<Guid?>("NightFeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NumOfHour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DayFeeId");

                    b.HasIndex("NightFeeId");

                    b.ToTable("PunishFee");
                });

            modelBuilder.Entity("Domain.Entities.RoomTypeFees.WeekFee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("FeePolicyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FeePolicyId")
                        .IsUnique();

                    b.ToTable("WeekFees");
                });

            modelBuilder.Entity("Domain.Entities.Users.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IConName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAllowAnonymous")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPresentInSideBar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("Domain.Entities.Users.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ParentPermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentPermissionId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Domain.Entities.Users.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Domain.Entities.Users.RoleMenu", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "MenuId");

                    b.HasIndex("MenuId");

                    b.ToTable("RoleMenus");
                });

            modelBuilder.Entity("Domain.Entities.Users.RolePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("Domain.Entities.Users.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("Domain.Entities.RoomTypeFees.DayFee", b =>
                {
                    b.HasOne("Domain.Entities.RoomTypeFees.FeePolicy", "FeePolicy")
                        .WithOne("DayFee")
                        .HasForeignKey("Domain.Entities.RoomTypeFees.DayFee", "FeePolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeePolicy");
                });

            modelBuilder.Entity("Domain.Entities.RoomTypeFees.HourFee", b =>
                {
                    b.HasOne("Domain.Entities.RoomTypeFees.FeePolicy", "FeePolicy")
                        .WithOne("HourFee")
                        .HasForeignKey("Domain.Entities.RoomTypeFees.HourFee", "FeePolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeePolicy");
                });

            modelBuilder.Entity("Domain.Entities.RoomTypeFees.HourFeePrice", b =>
                {
                    b.HasOne("Domain.Entities.RoomTypeFees.HourFee", "HourFee")
                        .WithMany("HourFeePrices")
                        .HasForeignKey("HourFeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HourFee");
                });

            modelBuilder.Entity("Domain.Entities.RoomTypeFees.MonthFee", b =>
                {
                    b.HasOne("Domain.Entities.RoomTypeFees.FeePolicy", "FeePolicy")
                        .WithOne("MonthFee")
                        .HasForeignKey("Domain.Entities.RoomTypeFees.MonthFee", "FeePolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeePolicy");
                });

            modelBuilder.Entity("Domain.Entities.RoomTypeFees.NightFee", b =>
                {
                    b.HasOne("Domain.Entities.RoomTypeFees.FeePolicy", "FeePolicy")
                        .WithOne("NightFee")
                        .HasForeignKey("Domain.Entities.RoomTypeFees.NightFee", "FeePolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeePolicy");
                });

            modelBuilder.Entity("Domain.Entities.RoomTypeFees.PunishFee", b =>
                {
                    b.HasOne("Domain.Entities.RoomTypeFees.DayFee", "DayFee")
                        .WithMany()
                        .HasForeignKey("DayFeeId");

                    b.HasOne("Domain.Entities.RoomTypeFees.NightFee", "NightFee")
                        .WithMany("PunishFees")
                        .HasForeignKey("NightFeeId");

                    b.Navigation("DayFee");

                    b.Navigation("NightFee");
                });

            modelBuilder.Entity("Domain.Entities.RoomTypeFees.WeekFee", b =>
                {
                    b.HasOne("Domain.Entities.RoomTypeFees.FeePolicy", "FeePolicy")
                        .WithOne("WeekFee")
                        .HasForeignKey("Domain.Entities.RoomTypeFees.WeekFee", "FeePolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeePolicy");
                });

            modelBuilder.Entity("Domain.Entities.Users.Menu", b =>
                {
                    b.HasOne("Domain.Entities.Users.Menu", "ParentMenu")
                        .WithMany("ChildrenMenu")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ParentMenu");
                });

            modelBuilder.Entity("Domain.Entities.Users.Permission", b =>
                {
                    b.HasOne("Domain.Entities.Users.Permission", "ParentPermission")
                        .WithMany("ChildPermissions")
                        .HasForeignKey("ParentPermissionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ParentPermission");
                });

            modelBuilder.Entity("Domain.Entities.Users.RoleMenu", b =>
                {
                    b.HasOne("Domain.Entities.Users.Menu", null)
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Users.RolePermission", b =>
                {
                    b.HasOne("Domain.Entities.Users.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Users.Staff", b =>
                {
                    b.HasOne("Domain.Entities.Users.Role", "Role")
                        .WithMany("Staffs")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.RoomTypeFees.FeePolicy", b =>
                {
                    b.Navigation("DayFee");

                    b.Navigation("HourFee");

                    b.Navigation("MonthFee");

                    b.Navigation("NightFee");

                    b.Navigation("WeekFee");
                });

            modelBuilder.Entity("Domain.Entities.RoomTypeFees.HourFee", b =>
                {
                    b.Navigation("HourFeePrices");
                });

            modelBuilder.Entity("Domain.Entities.RoomTypeFees.NightFee", b =>
                {
                    b.Navigation("PunishFees");
                });

            modelBuilder.Entity("Domain.Entities.Users.Menu", b =>
                {
                    b.Navigation("ChildrenMenu");
                });

            modelBuilder.Entity("Domain.Entities.Users.Permission", b =>
                {
                    b.Navigation("ChildPermissions");
                });

            modelBuilder.Entity("Domain.Entities.Users.Role", b =>
                {
                    b.Navigation("Staffs");
                });
#pragma warning restore 612, 618
        }
    }
}
